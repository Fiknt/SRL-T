{$DEFINE SRL_TCIRCLE_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

(*
TCircle
=======
TCircle related methods

type definition is found in shared/globals.simba
*)

(*
TCircle.ToTPA
~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.ToTPA(): TPointArray; 

Returns a full TPA of the circles circumference
*)
function TCircle.ToTPA(Fill: Boolean = False): TPointArray; 
begin
  //Result := TPAFromCircle(Self.X, Self.Y, Self.Radius);
  //if Fill then
  //  FillEllipse(Result);
end;

(*
TCircle.Bounds
~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Bounds(): TBox; 

Return a TBox covering the circle
*)
function TCircle.Bounds(): TBox; 
begin
  Result := [Self.X-Self.Radius, Self.Y-Self.Radius, Self.X+Self.Radius, Self.Y+Self.Radius];
end;

(*
TCircle.Contains
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Contains(p: TPoint): Boolean; 

Test if the point is within the circle
*)
function TCircle.Contains(p: TPoint): Boolean; 
begin
  Result := Hypot(p.x-Self.x, p.y-Self.Y) <= Self.Radius;
end; 

(*
TCircle.CircumferenceTPA
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.CircumferenceTPA(): TPointArray; 

Alias of `.ToTPA`
*)
function TCircle.CircumferenceTPA(): TPointArray; 
begin
 // Result := TPAFromCircle(Self.X, Self.Y, Self.Radius);
end;

(*
TCircle.Mean
~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Mean(): TPoint; 

Middle of the circle, same as `Point(Circle.X, Circle.Y)`
*)
function TCircle.Mean(): TPoint; 
begin
  Result.X := Self.X;
  Result.Y := Self.Y;
end;

(*
TCircle.Circumference
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Circumference(): Double; 

Returns the distance around the outside of a circle.
*)
function TCircle.Circumference(): Double; 
begin
  Result := 2*PI*Self.Radius;
end;

(*
TCircle.Area
~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Area(): Double; 

Returns the area the circle covers
*)
function TCircle.Area(): Double; 
begin
  Result := PI*Sqr(Self.Radius);
end;


(*
TCircle.Filter
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Filter(TestSet: TPointArray): TPointArray; 

Extract all the points from `TestSet` that fits within this circle.
*)
function TCircle.Filter(TestSet: TPointArray): TPointArray; 
var
  i, h, count: Int32;
begin
  h := High(TestSet);
  if (h < 0) then
    Exit;
  
  SetLength(Result, Length(TestSet));
  count := 0;
  for i := 0 to h do
  begin
    if Sqr(TestSet[i].X - Self.X) + Sqr(TestSet[i].Y - Self.Y) <= Sqr(Self.Radius) then
    begin
      Result[count] := TestSet[i];
      Inc(count);
    end;
  end;
  SetLength(Result, Count);
end;


(*
TCircle.Expand
~~~~~~~~~~~~~~
.. code-block:: pascal

    function TCircle.Expand(Inc: Int32): TCircle; 

Increase or decrease the radius of the circle, same as `Circle.Radius + Incr`.
*)
function TCircle.Expand(Incr: Int32): TCircle; 
begin
  Result := Self;
  Result.Radius += Incr;
end;

function TCircle.PointAtDegrees(Degrees: Double): TPoint; 
begin
  Result.X := Round(Self.Radius * Cos(Radians(Degrees) - PI/2)) + Self.X;
  Result.Y := Round(Self.Radius * Sin(Radians(Degrees) - PI/2)) + Self.Y;
end;


