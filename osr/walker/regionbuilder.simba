{$I SRL/OSR.simba}

type
  TRSWalkerRegionBuilder = record
    Form: TForm;
    ShapeBox: TSimbaShapeBox;
  end;

procedure TRSWalkerRegionBuilder.LoadRegions;
var
  Vars: TStringArray;
  I: Integer;
  S: String;
  Box: TBox;
begin
  Vars := RTTIClassFields(RSWalkerRegions);

  for I := 0 to High(Vars) with 3 do
  begin
    if Vars[I+1] = 'TBox' then
    begin
      Box.X1 := Vars[I+2].Between('X1 = ', ',').ToInteger();
      Box.Y1 := Vars[I+2].Between('Y1 = ', ',').ToInteger();
      Box.X2 := Vars[I+2].Between('X2 = ', ',').ToInteger();
      Box.Y2 := Vars[I+2].Between('Y2 = ', '}').ToInteger();

      Self.ShapeBox.AddBox(Box, 'RSWalkerRegions.' + Vars[I]);
    end;
  end;
end;

procedure TRSWalkerRegionBuilder.LoadLocations;
var
  Vars: TStringArray;
  I: Integer;
  S: String;
  Point: TPoint;
begin
  Vars := RTTIClassFields(RSWalkerLocations);

  for I := 0 to High(Vars) with 3 do
  begin
    if Vars[I+1] = 'TPoint' then
    begin
      Point.X := Vars[I+2].Between('X = ', ',').ToInteger();
      Point.Y := Vars[I+2].Between('Y = ', '}').ToInteger();

      Self.ShapeBox.AddPoint(Point, 'RSWalkerLocations.' + Vars[I]);
    end;
  end;
end;

procedure TRSWalkerRegionBuilder.PrintRegions;
var
  I: Integer;
  Padding: Integer;
begin
  for I := 0 to Self.ShapeBox.GetBoxCount() - 1 do
    Padding := Max(Padding, Length(Self.ShapeBox.GetBoxName(I)));

  WriteLn('type');
  WriteLn('  RSWalkerRegions = record');
  WriteLn('  class const');
  for I := 0 to Self.ShapeBox.GetBoxCount() - 1 do
    with Self.ShapeBox.GetBox(I) do
    begin
      Write('    ');
      Write(Self.ShapeBox.GetBoxName(I) + ':');
      Write(' ' * (Padding - Length(Self.ShapeBox.GetBoxName(I))));
      Write(' TBox = [%d, %d, %d, %d];'.Format([X1, Y1, X2, Y2]));
      WriteLn();
    end;
  WriteLn('  end;');
  WriteLn('');
end;

procedure TRSWalkerRegionBuilder.PrintLocations;
var
  I: Integer;
  Padding: Integer;
begin
  for I := 0 to Self.ShapeBox.GetBoxCount() - 1 do
    Padding := Max(Padding, Length(Self.ShapeBox.GetBoxName(I)));

  WriteLn('type');
  WriteLn('  RSWalkerLocations = record');
  WriteLn('  class const');
  for I := 0 to Self.ShapeBox.GetPointCount() - 1 do
    with Self.ShapeBox.GetPoint(I) do
    begin
      Write('    ');
      Write(Self.ShapeBox.GetPointName(I) + ':');
      Write(' ' * (Padding - Length(Self.ShapeBox.GetPointName(I))));
      Write(' TPoint = [%d, %d];'.Format([X, Y]));
      WriteLn();
    end;
  WriteLn('  end;');
  WriteLn('');
end;

procedure TRSWalkerRegionBuilder.Run;
begin
  Self.Form.Init(nil);
  Self.Form.SetCaption('Walker Region Builder');
  Self.Form.SetPosition(poScreenCenter);
  Self.Form.SetWidth(1200);
  Self.Form.SetHeight(850);

  Self.ShapeBox.Init(Self.Form);
  Self.ShapeBox.SetParent(Self.Form);
  Self.ShapeBox.SetAlign(alClient);
  Self.ShapeBox.LeftPanel.SetWidth(350);
  Self.ShapeBox.SetBackground(TRSWalkerMap.InternalCacheMap(SRL_WALKER_MAP));

  Self.LoadRegions();
  Self.LoadLocations();

  Self.Form.ShowModal();

  ClearDebug();

  Self.PrintRegions();
  Self.PrintLocations();

  Self.Form.Free();
end;

var
  WalkerRegionBuilder: TRSWalkerRegionBuilder;

begin
  Sync(@WalkerRegionBuilder.Run);
end.
