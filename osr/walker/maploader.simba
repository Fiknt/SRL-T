{$I SRL/OSR.simba}

type
  RSWalkerRegions = record
  class const
    GRAND_EXCHANGE: TBox = [7913,2540, 8200, 2820];
    LUNAR_ISLE:     TBox = [3436, 621, 4455, 1726];
    LUMBRIDGE:      TBox = [8103, 3516, 8525, 3791];
    ISLE_OF_SOULS:  TBox = [3627, 4572, 4861, 5634];
  end;

  TRSWalkerMapLoader = record
    Map: TMufasaBitmap;
    Regions: TBoxArray;
  end;

procedure TRSWalkerMapLoader.Load(ARegions: TBoxArray; Padding: Integer = 50);
var
  Bitmaps: TMufasaBitmapArray;
  I: Integer;
begin
  Self.Regions := ARegions;

  SetLength(Bitmaps, Length(Self.Regions));
  for I := 0 to High(Bitmaps) do
  begin
    Bitmaps[i] := TMufasaBitmap.Create();
    Bitmaps[i].LoadFromFile('C:\Users\OllyC\Desktop\Simba\world_new.bmp', Self.Regions[I]);
    Bitmaps[I].Pad(Padding);

    Self.Regions[I] := TBox.Create(0, 0, Bitmaps[I].GetWidth(), Bitmaps[I].GetHeight());
  end;

  Self.Regions := Self.Regions.Pack();

  Self.Map := TMufasaBitmap.Create(Self.Regions.Merge.Width() + (Padding * 2),Self. Regions.Merge.Height() + (Padding * 2));
  for I := 0 to High(Self.Regions) do
    begin
      Self.Map.DrawBitmap(Bitmaps[I], TPoint.Create(Self.Regions[I].X1 + Padding, Self.Regions[I].Y1 + Padding));
      //if (I = 1) then
      //  Self.map.DrawCross(TPoint.Create(Self.Regions[I].X1 + Padding, Self.Regions[I].Y1 + Padding), 25, 3, 255);
    end;
  for I := 0 to High(Bitmaps) do
    Bitmaps[I].Free();
end;

function TRSWalkerMapLoader.RegionFromPoint(P: TPoint): TBox;
var
  I: Integer;
begin
  for I := 0 to High(Self.Regions) do
    if P.InBox(Self.Regions[I]) then
      Exit(Self.Regions[I]);
end;

function TRSWalkerMapLoader.RegionIndexFromPoint(P: TPoint): Integer;
var
  I: Integer;
begin
  for I := 0 to High(Self.Regions) do
    if P.InBox(Self.Regions[I]) then
      Exit(I);
end;

var
  Walker: TRSWalker;
  WalkerMapLoader: TRSWalkerMapLoader;

function TRSWalker.GetMyPos: TPoint; override;
var
  I: Integer;
begin
  Self.RegionIndex := -1;
  Self.Region := [];

  Result := inherited();
  for I := 0 to WalkerMapLoader.Regions.High() do
    if Result.InBox(WalkerMapLoader.Regions[I]) then
    begin
      Self.RegionIndex := I;
      Self.Region := WalkerMapLoader.Regions[I];

      Result.X := Result.X - WalkerMapLoader.Regions[I].X1;
      Result.Y := Result.Y - WalkerMapLoader.Regions[I].Y1;

      Exit;
    end;
end;

procedure TRSWalker.DebugPosition(EnsureVisible: Boolean = True); override;
var
  X1, Y1, X2, Y2, X, Y: Int32;
  P: TPoint;
  Bitmap, WorldBitmap, MinimapBitmap: TMufasaBitmap;
  Time: Double;
  Position: TPoint;
  Lines: TStringArray;
begin
  Freeze();

  Time := PerformanceTimer();
  Position := Self.GetMyPos();
  Time := PerformanceTimer() - Time;

  if (Self.RegionIndex > -1) then
  begin
    Position.X += Self.Region.X1;
    Position.Y += Self.Region.Y1;
  end;

  X1 := Max(0, Position.X - 200);
  Y1 := Max(0, Position.Y - 200);
  X2 := Min(X1 + 400, Self.World.GetWidth()  - 1);
  Y2 := Min(Y1 + 400, Self.World.GetHeight() - 1);

  X := Position.X - X1;
  Y := Position.Y - Y1;

  WorldBitmap := Self.World.Copy(X1, Y1, X2, Y2);
  WorldBitmap.DrawLine(Point(0, Y), Point(X2 - X1, Y), $00FF00);
  WorldBitmap.DrawLine(Point(X, 0), Point(X, Y2 - Y1), $00FF00);
  WorldBitmap.DrawBox([X - 2, Y - 2, X + 2, Y + 2], $FFFFFF);

  MinimapBitmap := Self.ScaleMinimap(Self.GetCleanMinimap(), 1);

  P := MinimapBitmap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), P);

  MinimapBitmap.DrawBoxFilled([P.X - 1, P.Y - 1, P.X + 1, P.Y + 1], $FFFFFF);

  Bitmap := TMufasaBitmap.Create();
  Bitmap.SetSize(400 + MinimapBitmap.GetWidth() + 30, 420);
  Bitmap.Fill($403027);

  Lines := [
    '('      + ToStr(Position.X, ', ', Position.Y) + ')',
    'Acc: '  + ToStr(Round(Self.Similarity, 3)),
    'Time: ' + ToStr(Round(Time)) + ' ms'
  ];

  Bitmap.SetFontName('Consolas');
  Bitmap.SetFontSize(18);
  Bitmap.SetFontAntialiasing(True);

  Bitmap.DrawText(Lines[0], [420, 20 + MinimapBitmap.GetHeight()], $FFFFFF);
  Bitmap.DrawText(Lines[1] + LineEnding + Lines[2], [420, 370], $FFFFFF);

  Bitmap.DrawBitmap(WorldBitmap, [10, 10]);
  WorldBitmap.Free();

  Bitmap.DrawBitmap(MinimapBitmap, [420, 10]);
  MinimapBitmap.Free();


  Bitmap.Show(EnsureVisible);
  Bitmap.Free();

  UnFreeze();
end;

begin
  WalkerMapLoader.Load([RSWalkerRegions.GRAND_EXCHANGE, RSWalkerRegions.ISLE_OF_SOULS, RSWalkerRegions.LUMBRIDGE, RSWalkerRegions.LUNAR_ISLE]);
  WalkerMapLoader.Map.SaveToFile('test.bmp');
  //WalkerMapLoader.Map.Show();


  Walker.Setup('test.bmp');
  Walker.DebugPosition();
end;
