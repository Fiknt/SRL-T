{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSDepositBox = record(TRSInterface)
  class const
    ELEMENT_QUANTITY_1:        TRSInterfaceElement = [19, 233, 30, 30];
    ELEMENT_QUANTITY_5:        TRSInterfaceElement = [60, 233, 30, 30];
    ELEMENT_QUANTITY_10:       TRSInterfaceElement = [103, 233, 30, 30];
    ELEMENT_QUANTITY_X:        TRSInterfaceElement = [144, 233, 30, 30];
    ELEMENT_QUANTITY_ALL:      TRSInterfaceElement = [188, 233, 30, 30];
    ELEMENT_DEPOSIT_INVENTORY: TRSInterfaceElement = [285, 233, 30, 30];
    ELEMENT_DEPOSIT_WORN:      TRSInterfaceElement = [342, 233, 30, 30];
    ELEMENT_DEPOSIT_LOOT:      TRSInterfaceElement = [399, 233, 30, 30];
  end;

function TRSDepositBox.FindItem(Item: TRSItem; out Box: TBox): Boolean;
begin
  Result := Self.ItemFinder.Find([Item], Box);
end;

function TRSDepositBox.ClickItem(Item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Click(Item);
end;

function TRSDepositBox.InteractItem(Item: TRSItem; Option: String): Boolean;
begin
  Result := Self.ItemFinder.Interact(Item, Option);
end;

function TRSDepositBox.ContainsItem(Item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Contains(Item);
end;

function TRSDepositBox.ContainsAnyItem(Items: TRSItemArray): Boolean;
begin
  Result := Self.ItemFinder.ContainsAny(Items);
end;

function TRSDepositBox.CountItemStack(Item: TRSItem): Integer;
begin
  Result := Self.ItemFinder.CountStack(Item);
end;

function TRSDepositBox.GetSlotBoxes: TBoxArray; 
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

function TRSDepositBox.IsOpen: Boolean; overload;
begin
  Result := Self.IsTitle('Deposit Box');
end;

function TRSDepositBox.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSDepositBox.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxArray(Self.GetSlotBoxes(), False, $00FFFF);
end;

procedure TRSDepositBox.Setup(Name: String); override;
begin
  inherited;

  Self.ItemFinder.Name := Name + '.ItemFinder';
  Self.ItemFinder.GetSearchBoxesFunction := @Self.GetSlotBoxes;

  with Self.BoundsFinder.Alignments[ERSClientMode.FIXED] do
  begin
    Left   := [@InterfaceArea.X1];
    Right  := [@InterfaceArea.X2];
    Top    := [@InterfaceArea.Y1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;

  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_CLASSIC] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;

  // Same as above
  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_MODERN] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 452;
    Center.MaxHeight := 276;
  end;
end;

var
  DepositBox: TRSDepositBox;

begin
  DepositBox.Setup('DepositBox');
end;

(*
GameTabs.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.GetCurrentTab: ERSGametab; override;

Overrides **GameTabs.GetCurrentTab** to return the inventory tab if bank or depositbox is open.
*)
function TRSGameTabs.GetCurrentTab: ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and (Bank.IsOpen or DepositBox.IsOpen) then
    Result := ERSGameTab.INVENTORY;
end;
