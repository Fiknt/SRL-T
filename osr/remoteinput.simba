{$loadlib ../plugins/libremoteinput/libremoteinput}

function EIOS_GetClientPIDs(): TIntegerArray;
var
  I: Int32;
begin
  for I := 0 to EIOS_GetClients(True) - 1 do
    Result += EIOS_GetClientPID(I);
end;

function EIOS_PairClient(Pid: Int32): Pointer; override;
begin
  Result := inherited();
  if (Result = nil) then
    raise 'Failed to pair client';
end;


function EIOS_IsInputEnabled(eios: Pointer): Boolean;
begin
  Result := EIOS_IsMouseInputEnabled(eios) and EIOS_IsKeyboardInputEnabled(eios);
end;

procedure EIOS_SetInputEnabled(eios: Pointer; enabled: Boolean);
begin
  EIOS_SetMouseInputEnabled(eios, enabled);
  EIOS_SetKeyboardInputEnabled(eios, enabled);
end;


procedure RIInject(PID: Int32); override;
var
  PIDs: TIntegerArray;
begin
  inherited();

  if (not WaitUntil(Length(PIDs := EIOS_GetClientPIDs()) > 0, 100, 1000) and (Pids.Find(Pid) > -1)) then
    raise 'Failed to inject into pid ' + ToString(pid);
end;

procedure RIInject(ProcessName: String; out PID: Int32); overload;
var
  PIDs: TIntegerArray;
begin
  RIInject(ProcessName);

  if (not WaitUntil(Length(PIDs := EIOS_GetClientPIDs()) > 0, 100, 1000)) then
    raise 'Failed to inject into "' + ProcessName + '"';

  PID := PIDs[0];
end;

type
  TRemoteInput = record(TSRLBaseRecord)
    Image: TMufasaBitmap;
    EIOS: Pointer;
    PID: Int32;
  end;

function TRemoteInput.IsSetup(): Boolean;
begin
  Result := Self.PID > 0;
end;

procedure TRemoteInput.DisableRealInput();
begin
  EIOS_SetInputEnabled(Self.EIOS, False);
end;

procedure TRemoteInput.EnableRealInput();
begin
  EIOS_SetInputEnabled(Self.EIOS, True);
end;

procedure TRemoteInput.ReleaseClient();
begin
  EIOS_ReleaseClient(Self.EIOS);
end;

function TRemoteInput.GetImage(): TMufasaBitmap;
var
  w,h: Int32;
begin
  if (Self.Image = nil) then
  begin
    EIOS_SetGraphicsDebugging(Self.EIOS, True);

    Self.Image.Init();
    client.GetIOManager().GetDimensions(w,h);
    Self.Image.SetPersistentMemory(PtrUInt(EIOS_GetDebugImageBuffer(Self.EIOS)), w, h);
    Self.Image.Clear();
  end;

  Result := Self.Image;
end;

procedure TRemoteInput.Free();
begin
  if Self.EIOS = nil then
    Exit;

  if Self.Image <> nil then
    Self.Image.DrawClear(0);
  Self.EnableRealInput();
end;

procedure TRemoteInput.Setup();
const
  RS_EXECUTABLE = {$IFDEF WINDOWS}'JagexLauncher.exe'{$ELSE}'java'{$ENDIF};
begin
  Self.Name := 'Remote Input';

  {$IFNDEF SIMBAHEADLESS}
  if (Self.PID = 0) then
    Self.PID := GetSimbaTargetPID();
  {$ENDIF}
  
  try
    if (Self.PID = 0) then
    begin
      if (MessageDlg('SRL', 'Automatically try to find a RS client?', mtConfirmation, [mbYes, mbNo]) = mrNo) then
        raise 'No RS clients found';
      
      RIInject(RS_EXECUTABLE, Self.PID); 
    end else
      RIInject(Self.PID);
    Self.EIOS := EIOS_PairClient(Self.PID);
    if (Self.EIOS <> nil) then
      SetEIOSTarget({$libpath ../plugins/libremoteinput/libremoteinput}, ToString(Self.PID));
  except
    if MessageDlg(
      'Unsupported client!',
      'This client is not supported!' + LineEnding +
      'Only the 32 bits legacy client is supported!'+ LineEnding + LineEnding +
      'Click "Ok" to download the supported client.', TMsgDlgType.mtError, [mbOk]) then
      OpenWebPage('https://oldschool.runescape.com/download?force_test=control');
    Self.Fatal(GetExceptionMessage());
  end;
  AddOnTerminate(@Self.Free);
end;


procedure TRemoteInput.LoseFocus();
var
  Space: TBoxArray;
begin
  Space := GetClientBounds().Expand(50).Invert(GetClientBounds().Expand(1000));

  if (Length(Space) > 0) then
  begin
    Mouse.CanIdle := False;
    Mouse.Click(Space[Random(Length(Space))], MOUSE_LEFT);
    Mouse.CanIdle := True;
  end;
end;


