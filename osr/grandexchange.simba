{$DEFINE SRL_GRANDEXCHANGE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSGEInterface = (
    UNKNOWN,
    HISTORY,
    OVERVIEW,
    OFFER_STATUS,
    OFFER_SETUP
  );


  TRSGrandExchange = record(TRSInterface)
  class const
    ELEMENT_SLOT_0:          TRSInterfaceElement = [16, 67, 109, 104];
    ELEMENT_SLOT_1:          TRSInterfaceElement = [129, 67, 109, 104];
    ELEMENT_SLOT_2:          TRSInterfaceElement = [246, 67, 109, 104];
    ELEMENT_SLOT_3:          TRSInterfaceElement = [363, 67, 109, 104];
    ELEMENT_SLOT_4:          TRSInterfaceElement = [12, 187, 109, 104];
    ELEMENT_SLOT_5:          TRSInterfaceElement = [129, 187, 109, 104];
    ELEMENT_SLOT_6:          TRSInterfaceElement = [246, 187, 109, 104];
    ELEMENT_SLOT_7:          TRSInterfaceElement = [363, 187, 109, 104];
    ELEMENT_HISTORY:         TRSInterfaceElement = [10, 10, 41, 14];
    ELEMENT_ITEM_NAME:       TRSInterfaceElement = [174, 44, 285, 19];
    ELEMENT_OFFER_TYPE:      TRSInterfaceElement = [46, 44, 103, 19];
    ELEMENT_CONFIRM:         TRSInterfaceElement = [168, 251, 148, 36];
    ELEMENT_QUANTITY:        TRSInterfaceElement = [54, 160, 155, 16];
    ELEMENT_PRICE_PER_ITEM:  TRSInterfaceElement = [275, 160, 155, 16];
    ELEMENT_TOTAL_PRICE:     TRSInterfaceElement = [41, 214, 403, 17];
    ELEMENT_QUANTITY_1:      TRSInterfaceElement = [33, 183, 31, 21];
    ELEMENT_QUANTITY_10:     TRSInterfaceElement = [75, 183, 31, 21];
    ELEMENT_QUANTITY_100:    TRSInterfaceElement = [117, 183, 31, 21];
    ELEMENT_QUANTITY_1K:     TRSInterfaceElement = [159, 183, 31, 21];
    ELEMENT_QUANTITY_CUSTOM: TRSInterfaceElement = [201, 183, 31, 21];
    ELEMENT_PRICE_DOWN:      TRSInterfaceElement = [259, 183, 31, 21];
    ELEMENT_PRICE_UP:        TRSInterfaceElement = [415, 183, 31, 21];
    ELEMENT_PRICE_GUIDE:     TRSInterfaceElement = [316, 183, 31, 21];
    ELEMENT_PRICE_CUSTOM:    TRSInterfaceElement = [358, 183, 31, 21];
    ELEMENT_ITEM:            TRSInterfaceElement = [78, 73, 36, 32];
    ELEMENT_BACK:            TRSInterfaceElement = [20, 261, 27, 15];
    ELEMENT_ITEM_PRICE:      TRSInterfaceElement = [49, 111, 106, 15];
  var
    FINDER_BANKER: TRSObjectFinder;
  end;

function TRSGrandExchange.FindNPC(Finder: TRSObjectFinder): T2DPointArray;
var
  TPA: TPointArray;
  P: TPoint;
  B: TBox;
  I: Int32;
  Weights: TIntegerArray;
  Size: Int32;
begin
  // Find center G.E using yellow dots
  TPA := Minimap.GetDots(ERSMinimapDot.NPC);
  TPA.Offset([2, 2]);
  TPA := TPA.Cluster(15).Biggest();
  with TPA.MeanEx() do
    P := Minimap.VecToMS([X, Y]);

  // Size of GE center at fixed client & default(50) zoom.
  Size := MainScreen.ConvertDistance(110);
  
  // Center G.E on the mainscreen
  B := [P.X, P.Y, P.X, P.Y];
  B := B.Expand(Size);

  Result := MainScreen.FindObject(Finder, B);

  if (Length(Result) > 0) then
  begin
    // Weigh from center AND towards the player
    SetLength(Weights, Length(Result));
    for I := 0 to High(Result) do
      if Length(Result[I]) > 0 then
        Weights[I] := Distance(Result[I].Mean, P) + Min(Distance(Result[I].Mean, MainScreen.Center), Size);

    Result.Sort(Weights, True);
  end;
end;

function TRSGrandExchange.OpenBank: Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if Bank.IsOpen() or Bank.Open(Mouse.Position()) then
    Exit(True);

  ATPA := Self.FindNPC(Self.FINDER_BANKER);
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);
  
  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);
    
    if Bank.Open(P) then
      Exit(True);
  end;
end;

function TRSGrandExchange.GetCurrentInterface: ERSGEInterface;
begin
  if Self.IsTitle('Set up offer') then
    Result := ERSGEInterface.OFFER_SETUP
  else
  if Self.IsTitle('Offer status') then
    Result := ERSGEInterface.OFFER_STATUS
  else
  if Self.IsTitle('Trade History') then
    Result := ERSGEInterface.HISTORY
  else
  if Self.IsTitle('Grand Exchange') then
    Result := ERSGEInterface.OVERVIEW;
end;

function TRSGrandExchange.IsOpen: Boolean;
begin
  Result := Self.GetCurrentInterface() <> ERSGEInterface.UNKNOWN;
end;

function TRSGrandExchange.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSGrandExchange.GetItemName: String;
begin
  Result := Self.ElementFinder.ReadText(Self.ELEMENT_ITEM_NAME, [RSColors.TEXT_ORANGE], [5], RS_FONT_BOLD_12);
end;

function TRSGrandExchange.GetItemQuantity: Int32;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP: Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_QUANTITY, [RSColors.TEXT_ORANGE_LIGHT], [5], RS_FONT_PLAIN_11);
    ERSGEInterface.OFFER_STATUS: Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_QUANTITY, [RSColors.TEXT_ORANGE_LIGHT], [5], RS_FONT_PLAIN_12);
  end;
end;

function TRSGrandExchange.GetPricePerItem: Int32;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP: Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_PRICE_PER_ITEM, [RSColors.TEXT_ORANGE_LIGHT], [5], RS_FONT_PLAIN_11);
    ERSGEInterface.OFFER_STATUS: Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_PRICE_PER_ITEM, [RSColors.TEXT_ORANGE_LIGHT], [5], RS_FONT_PLAIN_12);
  end;
end;

function TRSGrandExchange.GetItemTotalPrice: Int32;
begin
  Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_TOTAL_PRICE, [RSColors.TEXT_WHITE], [5], RS_FONT_BOLD_12);
end;

function TRSGrandExchange.GetItemGuidePrice: Int32;
begin
  Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_ITEM_PRICE, [RSColors.TEXT_ORANGE_LIGHT], [5], RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.IsSearchOpen: Boolean;
var
  FoundBounds: TBox;
begin
  Result := OCR.LocateText(Chat.Bounds, 'What would you like to buy', RS_FONT_BOLD_12, TOCRColorFilter.Create([RSColors.TEXT_BLACK]), FoundBounds) = 1;
end;

function TRSGrandExchange.OpenSearch: Boolean;
begin
  if Self.IsSearchOpen() then
    Exit(True);

  if (Self.GetCurrentInterface() = ERSGEInterface.OFFER_SETUP) then
  begin
    Self.ElementFinder.Click(Self.ELEMENT_ITEM);

    Result := WaitUntil(Self.IsSearchOpen(), 500, 3000);
  end;
end;

function TRSGrandExchange.GetCurrentSearch: String;
begin
  Result := OCR.Recognize(Chat.Bounds, TOCRColorFilter.Create([8388608]), RS_FONT_BOLD_12).StripR('*');
end;

function TRSGrandExchange.ClearSearch: Boolean;
begin
  while (Self.GetCurrentSearch() <> '') do
    Keyboard.PressKey(VK_BACK);
    
  Result := Self.IsOpen() and (Self.GetCurrentSearch() = '');
end;

function TRSGrandExchange.FindSearch(Item: String; out B: TBox): Boolean;
begin
  if (Item <> '') then
    Item[1] := UpCase(Item[1]);
    
  Result := OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12, TOCRColorFilter.Create([$000000]), B) = 1;
end;

function TRSGrandExchange.ClickSearch(Item: String): Boolean;
var
  B: TBox;
begin
  Result := Self.IsSearchOpen() and (OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12, TOCRColorFilter.Create([$000000]), B) = 1);
  if Result then
    Mouse.Click(B, MOUSE_LEFT);
end;

function TRSGrandExchange.Search(Item: String; Click: Boolean): Boolean;
var
  B: TBox;
begin
  if OCR.LocateText(Chat.Bounds, Item, RS_FONT_BOLD_12, TOCRColorFilter.Create([8388608]), B) = 1 then
    Exit(True);
  
  if Self.OpenSearch() and Self.ClearSearch() then
  begin
    Keyboard.Send(Item);
    
    Result := WaitUntil(Self.FindSearch(Item, B), 500, 2500);
    if Result and Click then
      Mouse.Click(B, MOUSE_LEFT);
  end;
end;

type
  ERSGEOfferType = (EMPTY, BUY, SELL);

  TRSGEOfferStatus = record
    OfferType: ERSGEOfferType;
    Item: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    Progress: Int32;
  end;
  
function TRSGrandExchange.GetOfferSlots: TBoxArray;
begin
  Result := Grid(4, 2, 114, 109, [3, 11], [Self.X1 + 9, Self.Y1 + 64]);
end;
  
function TRSGrandExchange.GetProgress(B: TBox; BarSize: Int32): Int32;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, [1664168, 18944], B) then
    Result := Round(TPA.Bounds.Width() / BarSize * 100)
  else
  if SRL.CountColor(111, B) > BarSize then
    Result := -1;
end;

function TRSGrandExchange.GetOfferStatus(Slot: Int32): TRSGEOfferStatus;
var
  Slots: TBoxArray;
begin
  Slots := Self.GetOfferSlots();
  
  case OCR.Recognize(Slots[Slot], TOCRColorFilter.Create([2070783]), RS_FONT_BOLD_12) of
    'Empty': Result.OfferType := ERSGEOfferType.EMPTY;
    'Buy':   Result.OfferType := ERSGEOfferType.BUY; 
    'Sell':  Result.OfferType := ERSGEOfferType.SELL;
  end;
  
  if (Result.OfferType <> ERSGEOfferType.EMPTY) then
  begin
    Result.Item := OCR.RecognizeLines(Slots[Slot], TOCRColorFilter.Create([4176127]), RS_FONT_PLAIN_11).Merge(' ');
    Result.PricePerItem := OCR.RecognizeNumber(Slots[Slot], TOCRColorFilter.Create([2070783]), RS_FONT_PLAIN_11);
    Result.Quantity := SRL.GetItemAmount(Slots[Slot]);
    Result.TotalPrice := Result.Quantity * Result.PricePerItem;
    Result.Progress := Self.GetProgress(Slots[Slot], 105);
  end;
end;

type
  TRSGEHistoryItem = record
    Item: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    Bounds: TBox;
  end;
  TRSGEHistory = array of TRSGEHistoryItem;

function TRSGrandExchange.GetHistory: TRSGEHistory;
const
  BG_DARK := CTS1(3621708, 5);
  BG_LIGHT := CTS1(4016466, 5); 
var
  RowDark, RowLight: TPointArray;
  Row: TBox;
  Rows, Columns: TBoxArray;
  Item: TRSGEHistoryItem;
begin
  SRL.FindColors(RowDark, BG_DARK, Self.Bounds);
  SRL.FindColors(RowLight, BG_LIGHT, Self.Bounds);
  
  Rows := RowDark.Cluster(1).ToTBA() + RowLight.Cluster(1).ToTBA();
  Rows.SortByY();

  for Row in Rows do
  begin
    if (Row.Width < 10) or (Row.Height < 10) then
      Continue;
 
    Columns := Row.Partition(1, 4);
 
    Item := [];
    Item.Bounds := Row;
    Item.Item := OCR.Recognize(Columns[1].Expand(25, 0), TOCRColorFilter.Create([4176127, $FFFFFF]), RS_FONT_PLAIN_12);
    if (Item.Item = '') then
      Continue;

    Item.Quantity := SRL.GetItemAmount(Columns[2]);
    if (Item.Quantity = 0) Then
      Item.Quantity := 1;
      
    Item.TotalPrice := OCR.RecognizeNumber(Columns[3], TOCRColorFilter.Create([2070783]), RS_FONT_PLAIN_11);
    Item.PricePerItem := Item.TotalPrice div Item.Quantity;

    Result := Result + Item;
  end;
end;

procedure TRSGrandExchange.Setup(Name: String); override;
begin
  inherited;

  with Self.BoundsFinder.Alignments[ERSClientMode.FIXED] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;

  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_CLASSIC] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;

  // Same as above
  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_MODERN] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, -1];
    Bottom := [@InterfaceArea.Y2];
    Center := [484, 304];
  end;
end;

var
  GrandExchange: TRSGrandExchange;

begin
  GrandExchange.Setup('GrandExchange');
end;

(*
BankScreen.Open
~~~~~~~~~~~~~~~
.. pascal:: function TRSBankScreen.Open(Location: ERSBankLocation): Boolean; override;

Overrides **BankScreen.Open** to support opening the grand exchange.
*)
function TRSBank.Open(Location: ERSBankLocation): Boolean; override;
begin
  if (Location = ERSBankLocation.GRAND_EXCHANGE) then
    Result := GrandExchange.OpenBank()
  else
    Result := inherited();
end;
