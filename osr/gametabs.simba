{$DEFINE SRL_GAMETABS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSGameTabs = record(TRSInterface)
    Cache: record
      ClientWidth, ClientHeight: Integer;
      ClientMode: ERSClientMode;

      Bounds: TBox;
      TabBoxes: TBoxArray;
    end;
  end;

  ERSGameTab = (
    COMBAT,
    STATS,
    QUESTS,
    INVENTORY,
    EQUIPMENT,
    PRAYER,
    MAGIC,
    CLAN,
    FRIENDS,
    ACCOUNT,
    LOGOUT,
    OPTIONS,
    EMOTES,
    MUSIC,
    UNKNOWN
  );

function TRSGameTabs.GetCurrentTab: ERSGametab;
var
  Tabs: TBoxArray;
  I: Int32;
begin
  Self.Bounds();

  if (Self.Cache.ClientMode = ERSClientMode.RESIZABLE_MODERN) and
     (SRL.CountColor(8639715, Self.Cache.TabBoxes[ERSGameTab.LOGOUT]) > 0) then
       Exit(ERSGameTab.LOGOUT);

  for I := 0 to High(Self.Cache.TabBoxes) do
    if CountColorTolerance(1778534, Self.Cache.TabBoxes[I], 22) > 50 then
      Exit(ERSGameTab(I));

  Exit(ERSGameTab.UNKNOWN);
end;

function TRSGameTabs.GetTabBox(Tab: ERSGameTab): TBox;
begin
  Self.Bounds();

  Result := Self.Cache.TabBoxes[Tab];
end;

function TRSGameTabs.Open(Tab: ERSGameTab): Boolean;
begin
  if Self.GetCurrentTab() = Tab then
    Exit(True);

  for 1 to 3 do
  begin
    Mouse.Click(Self.GetTabBox(Tab), MOUSE_LEFT, SRL.Dice(50));
    if WaitUntil(Self.GetCurrentTab() = Tab, SRL.TruncatedGauss(100, 1000), 2500) then
      Exit(True);
  end;
end;

function TRSGameTabs.CustomBoundsFinder(ClientMode: ERSClientMode): TBox;
var
  ClientWidth, ClientHeight, I: Integer;
  Boxes: TBoxArray;
begin
  GetClientDimensions(ClientWidth, ClientHeight);
  if (Self.Cache.ClientWidth = ClientWidth) and (Self.Cache.ClientHeight = ClientHeight) and (Self.Cache.ClientMode = ClientMode) then
    Exit(Self.Cache.Bounds);

  case ClientMode of
    ERSClientMode.FIXED:
      begin
        Result.X1 := RootInterface.X2 - 242;
        Result.X2 := RootInterface.X2 - 2;
        Result.Y1 := RootInterface.Y2 - 334;
        Result.Y2 := RootInterface.Y2;

        Boxes := TBoxArray.Create([Result.X1 + 6, Result.Y1 + 1], 7, 2, 30, 33, [3, 265]);
      end;

    ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Result.X1 := RootInterface.X2 - 240;
        Result.X2 := RootInterface.X2;
        Result.Y1 := RootInterface.Y2 - 334;
        Result.Y2 := RootInterface.Y2;

        Boxes := TBoxArray.Create([Result.X1 + 6, Result.Y1 + 1], 7, 2, 30, 33, [3, 265]);
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        Result.X1 := RootInterface.X2 - 230;
        Result.X2 := RootInterface.X2;
        Result.Y1 := RootInterface.Y2 - 346;
        Result.Y2 := RootInterface.Y2;

        // Single row, else two rows
        if (RootInterface.Width >= 948) then
        begin
          Result.X1 -= 198;
          Result.Y1 += 36;

          Boxes := TBoxArray.Create([Result.X1, Result.Y2 - 35], 14, 1, 30, 33, [3, 0]);
          for I := Ord(ERSGameTab.MUSIC) downto Ord(ERSGameTab.CLAN) do
            Boxes[I] := Boxes[I - 1];
        end else
          Boxes := TBoxArray.Create([Result.X1, Result.Y2 - 70], 7, 2, 30, 33, [3, 3]);

        // rearrange to match ERSGameTab layout
        Sort(Boxes, [0,1,2,3,4,5,6,10,8,9,7,11,12,13], True);

        // Set logout as top right corner
        Boxes[ERSGameTab.LOGOUT] := [RootInterface.X2 - 19, RootInterface.Y1 + 9, RootInterface.X2 - 10, RootInterface.Y1 + 18];
      end;
  end;

  Self.Cache := [ClientWidth, ClientHeight, ClientMode, Result, Boxes];
end;

procedure TRSGameTabs.Draw(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  //Bitmap.DrawBoxArray(Self.GetTabBoxes(), False, $00FFFF);
end;

procedure TRSGameTabs.Setup(Name: String); override;
begin
  inherited;

  Self.BoundsFinder.CustomFunction  := @Self.CustomBoundsFinder;
end;

var
  GameTabs: TRSGameTabs;

begin
  GameTabs.Setup('GameTabs');
end;

