{$DEFINE SRL_LOGOUT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TRSLogout = record(TRSGameTab)
  class const
    ELEMENT_BUTTON_WS:       TRSInterfaceElement = [28, 167, 134, 26];
    ELEMENT_BUTTON_LOGOUT:   TRSInterfaceElement = [29, 215, 134, 26];
    ELEMENT_BUTTON_WS_CLOSE: TRSInterfaceElement = [168, 2, 21, 21];
    ELEMENT_BUTTON_WS_WORLD: TRSInterfaceElement = [10, 4, 150, 16];
  end;

function TRSLogout.IsWorldSwitcherOpen: Boolean;
begin
  Result := Self.IsOpen() and Self.ElementFinder.HasText(Self.ELEMENT_BUTTON_WS_WORLD, [RSColors.TEXT_ORANGE], 'Current world', RS_FONT_BOLD_12);
end;

function TRSLogout.CloseWorldSwitcher: Boolean;
begin
  if not Self.IsWorldSwitcherOpen() then
    Exit(True);

  Self.ElementFinder.Click(Self.ELEMENT_BUTTON_WS_CLOSE);

  Result := WaitUntil(not Self.IsWorldSwitcherOpen(), RandomLeft(50, 1500), 3000);
end;

function TRSLogout.ClickLogout(Attempts: Int32 = 5; TryTime: Int32 = 20000): Boolean;
var
  Interval: Integer;
begin
  if Self.Open() and Self.CloseWorldSwitcher() then
  begin
    Interval := TryTime div Attempts;

    for 1 to Attempts do
    begin
      Self.ElementFinder.Click(Self.ELEMENT_BUTTON_LOGOUT);

      if RSClient.IsLoggedOut(Interval + Random(-1000, 1000)) then
        Exit(True);
    end;
  end;
end;

procedure TRSLogout.Setup(Name: String); override;
begin
  inherited;

  Self.ID := ERSGameTab.LOGOUT;
end;

var
  Logout: TRSLogout;

begin
  Logout.Setup('Logout');
end;
