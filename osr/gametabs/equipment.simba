{$DEFINE SRL_STATS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSEquipmentSlot = (
    HELM,
    CAPE,
    AMULET,
    AMMO,
    WEAPON,
    BODY,
    SHIELD,
    LEGS,
    GLOVES,
    FEET,
    RING
  );
  
  TRSEquipment = record(TRSGameTab)
  class const
    ELEMENT_SLOT_HELM:       TRSInterfaceElement = [80, 8, 30, 30];
    ELEMENT_SLOT_CAPE:       TRSInterfaceElement = [39, 47, 30, 30];
    ELEMENT_SLOT_AMULET:     TRSInterfaceElement = [81, 47, 30, 30];
    ELEMENT_SLOT_AMMO:       TRSInterfaceElement = [121, 47, 30, 30];
    ELEMENT_SLOT_WEAPON:     TRSInterfaceElement = [24, 86, 30, 30];
    ELEMENT_SLOT_BODY:       TRSInterfaceElement = [81, 86, 30, 30];
    ELEMENT_SLOT_SHIELD:     TRSInterfaceElement = [136, 86, 30, 30];
    ELEMENT_SLOT_LEGS:       TRSInterfaceElement = [80, 126, 30, 30];
    ELEMENT_SLOT_GLOVES:     TRSInterfaceElement = [24, 166, 30, 30];
    ELEMENT_SLOT_FEET:       TRSInterfaceElement = [80, 166, 30, 30];
    ELEMENT_SLOT_RING:       TRSInterfaceElement = [136, 166, 30, 30];
    ELEMENT_BUTTON_STATS:    TRSInterfaceElement = [9, 211, 36, 36];
    ELEMENT_BUTTON_PRICE:    TRSInterfaceElement = [54, 211, 36, 36];
    ELEMENT_BUTTON_DEATH:    TRSInterfaceElement = [99, 211, 36, 36];
    ELEMENT_BUTTON_FOLLOWER: TRSInterfaceElement = [144, 211, 36, 36];
  end;

function TRSEquipment.GetSlotBox(Slot: ERSEquipmentSlot): TBox;
const
  Elements: TRSInterfaceElementArray := [
    Self.ELEMENT_SLOT_HELM, Self.ELEMENT_SLOT_CAPE, Self.ELEMENT_SLOT_AMULET,
    Self.ELEMENT_SLOT_AMMO, Self.ELEMENT_SLOT_WEAPON, Self.ELEMENT_SLOT_BODY,
    Self.ELEMENT_SLOT_SHIELD, Self.ELEMENT_SLOT_LEGS, Self.ELEMENT_SLOT_GLOVES,
    Self.ELEMENT_SLOT_FEET, Self.ELEMENT_SLOT_RING
  ];
begin
  Result := Self.ElementFinder.Bounds(Elements[Slot]);
end;

function TRSEquipment.GetSlotBoxes: TBoxArray;
var
  I: Integer;
begin
  SetLength(Result, Length(ERSEquipmentSlot));
  for I := 0 to High(Result) do
    Result[I] := Self.GetSlotBox(ERSEquipmentSlot(I));
end;

function TRSEquipment.ClickSlot(Slot: ERSEquipmentSlot): Boolean;
begin
  Result := Self.IsSlotUsed(Slot);
  if Result then
    Mouse.Click(Self.GetSlotBox(Slot), MOUSE_LEFT);
end;

function TRSEquipment.InteractSlot(Slot: ERSEquipmentSlot; Option: String): Boolean;
begin
  Result := Self.IsSlotUsed(Slot);

  if Result then
  begin
    Mouse.Move(Self.GetSlotBox(Slot));

    Result := ChooseOption.Select(Option);
  end;
end;

function TRSEquipment.IsSlotUsed(Slot: ERSEquipmentSlot): Boolean;
begin
  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), Self.GetSlotBox(Slot)) > 0;
end;

function TRSEquipment.CountUsedSlots: Integer;
var
  e: ERSEquipmentSlot;
begin
  for e in ERSEquipmentSlot do
    if Self.IsSlotUsed(e) then
      Result := Result + 1;
end;

function TRSEquipment.Contains(Item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Contains(Item);
end;

function TRSEquipment.CountItemStack(Item: TRSItem): Integer;
begin
  Result := Self.ItemFinder.CountStack(Item);
end;

function TRSEquipment.ClickItem(Item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Click(Item);
end;

function TRSEquipment.InteractItem(Item: TRSItem; Option: String): Boolean;
begin
  Result := Self.ItemFinder.Interact(Item, Option);
end;

procedure TRSEquipment.Setup(Name: String); override;
begin
  inherited;

  Self.ItemFinder.GetSearchBoxesFunction := @Self.GetSlotBoxes;
  Self.ID := ERSGameTab.EQUIPMENT;
end;

var
  Equipment: TRSEquipment;

begin
  Equipment.Setup('Equipment');
end;
