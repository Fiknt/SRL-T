{$DEFINE SRL_OPTIONS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
(*
type ERSOptionsTab
~~~~~~~~~~~~~~~~~~
  Enumerator type for each of the options gametab tabs.
*)
  ERSOptionsTab = (
    CONTROLS,
    AUDIO,
    DISPLAY
  );

  TRSOptions = record(TRSGameTab)
  class const
    ELEMENT_TAB_CONTROL:       TRSInterfaceElement = [0, 4, 57, 26];
    ELEMENT_TAB_AUDIO:         TRSInterfaceElement = [66, 4, 58, 26];
    ELEMENT_TAB_DISPLAY:       TRSInterfaceElement = [130, 4, 57, 26];
    ELEMENT_SLIDER_ZOOM:       TRSInterfaceElement = [60, 109, 97, 10];
    ELEMENT_SLIDER_BRIGHTNESS: TRSInterfaceElement = [60, 72, 97, 10];
    ELEMENT_BUTTON_AID:        TRSInterfaceElement = [15, 179, 34, 34];
    ELEMENT_BUTTON_RUN:        TRSInterfaceElement = [57, 179, 34, 34];
    ELEMENT_BUTTON_HOUSE:      TRSInterfaceElement = [99, 179, 34, 34];
    ELEMENT_BUTTON_BOND:       TRSInterfaceElement = [141, 179, 34, 34];
    ELEMENT_PLAYER_ATTACK:     TRSInterfaceElement = [15, 112, 160, 18];
    ELEMENT_NPC_ATTACK:        TRSInterfaceElement = [15, 151, 160, 18];
    ELEMENT_HOUSE_CLOSE:       TRSInterfaceElement = [164, 9, 21, 20];
    ELEMENT_HOUSE_TITLE:       TRSInterfaceElement = [37, 2, 116, 20];
    ELEMENT_HOUSE_GUEST:       TRSInterfaceElement = [15, 141, 160, 26];
    ELEMENT_HOUSE_SERVANT:     TRSInterfaceElement = [15, 176, 160, 26];
    ELEMENT_HOUSE_LEAVE:       TRSInterfaceElement = [15, 211, 160, 26];
  end;

(*
Options.GetSliderLevel
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetSliderLevel(SliderBounds: TBox; SliderColor: Integer): Integer;

Gives you the level of the passed in **SliderBounds** which can be obtained with **Options.GetBrightnessSliderBounds()**
or **Options.GetZoomSliderBounds()**.

Example
-------

  WriteLn Options.GetSliderLevel(Options.GetZoomSliderBounds(), 2106152); //2106152 is the color of the zoom slider.
*)
function TRSOptions.GetSliderLevel(SliderBounds: TBox; SliderColor: Integer): Integer;
var
  TPA: TPointArray;
begin
  Result := -1;
  if Self.Open() and Self.OpenTab(ERSOptionsTab.DISPLAY) then
  begin
    if SRL.FindColors(TPA, SliderColor, SliderBounds.Expand(10)) > 0 then
      Result := Round((TPA.Mean.X - SliderBounds.X1) * 100 / (SliderBounds.Width() - 1));
  end;
end;

(*
Options.GetZoomLevel
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetZoomLevel(): Integer;

Wrapper function to get the zoom level. Uses **Options.GetSliderLevel()** internally.

Example
-------

  WriteLn Options.GetZoomLevel();
*)
function TRSOptions.GetZoomLevel(): Integer;
begin
  Result := Self.GetSliderLevel(Self.ElementFinder.Bounds(Self.ELEMENT_SLIDER_ZOOM), 2106152);
end;

(*
Options.SetZoomLevel
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetZoomLevel(Level: Integer): Boolean;

This method attempts to set our zoom at whatever **Level** is specified.
**Level** should be between 0 and 100.

Example
-------

  WriteLn Options.SetZoomLevel(50);
*)
function TRSOptions.SetZoomLevel(Level: Integer): Boolean;
var
  CurrentLevel: Integer;
  SliderBounds: TBox;
begin
  CurrentLevel := Self.GetZoomLevel();
  if (CurrentLevel = Level) then
    Exit(True);
    
  // Move slider away so we can click the level
  if (Abs(CurrentLevel - Level) <= 20) then
  begin
    if (CurrentLevel + 40 < 100) then
      Self.SetZoomLevel(CurrentLevel + Random(20, 40))
    else
      Self.SetZoomLevel(CurrentLevel - Random(20, 40));
  end;
  
  SliderBounds := Self.ElementFinder.Bounds(Self.ELEMENT_SLIDER_ZOOM);
  Mouse.Click(
    SliderBounds.X1 + Round((Level * (SliderBounds.Width() - 1) / 100)) + 1,
    SliderBounds.Y1 + Random(SliderBounds.Y2 - SliderBounds.Y1),
    MOUSE_LEFT
  );

  Result := WaitUntil(Self.GetZoomLevel() = Level, RandomLeft(50, 1500), 3000);
end;

(*
Options.GetBrightnessLevel
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetBrightnessLevel(): Integer;

Wrapper function to get the brightness level. Uses **Options.GetSliderLevel()** internally.

Example
-------

  WriteLn Options.GetBrightnessLevel();
*)
function TRSOptions.GetBrightnessLevel(): Integer;
begin
  Result := Self.GetSliderLevel(Self.ElementFinder.Bounds(Self.ELEMENT_SLIDER_BRIGHTNESS), 2040359);
end;

(*
Options.SetMaxBrightness
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.SetMaxBrightness(): Boolean;

This method attempts to set our brightness at max.

Example
-------

  WriteLn Options.SetMaxBrightness();
*)
function TRSOptions.SetMaxBrightness(): Boolean;
begin
  if Result := Self.OpenTab(ERSOptionsTab.DISPLAY) then
    with Self.ElementFinder.Bounds(Self.ELEMENT_SLIDER_BRIGHTNESS) do
      Mouse.Click(X2 + Random(3, 5), Random(Y1, Y2), MOUSE_LEFT); 
end;

(*
Options.IsHouseOptionsOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.IsHouseOptionsOpen(): Boolean;

Checks wether the house options are open or not.

Example
-------

  WriteLn Options.IsHouseOptionsOpen();
*)
function TRSOptions.IsHouseOptionsOpen(): Boolean;
begin
  Result := Self.ElementFinder.HasText(Self.ELEMENT_HOUSE_TITLE, [RSColors.TEXT_ORANGE], 'House options', RS_FONT_BOLD_12);
end;

(*
Options.OpenHouseOptions
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.OpenHouseOptions(): Boolean;

Attempts to open the house options.
*)
function TRSOptions.OpenHouseOptions(): Boolean;
begin
  if not Self.Open() then
    Exit(False);
  if Self.IsHouseOptionsOpen() then
    Exit(True);

  if Self.OpenTab(ERSOptionsTab.CONTROLS) then
  begin
    Self.ElementFinder.Click(Self.ELEMENT_BUTTON_HOUSE);

    Result := WaitUntil(Self.IsHouseOptionsOpen(), RandomLeft(50, 1500), 3000);
  end;
end;

(*
Options.CloseHouseOptions
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.CloseHouseOptions(): Boolean;

Attempts to close the house options if they are open.
*)
function TRSOptions.CloseHouseOptions(): Boolean;
begin
  if not Self.IsHouseOptionsOpen then
    Exit(True);

  Self.ElementFinder.Click(Self.ELEMENT_HOUSE_CLOSE);

  Result := WaitUntil(not Self.IsHouseOptionsOpen(), RandomLeft(50, 1500), 3000);
end;

(*
Options.GetCurrentTab
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.GetCurrentTab(): ERSOptionsTab;

Returns the current active tab within the options gametab.

Example
-------

  WriteLn Options.GetCurrentTab();
*)
function TRSOptions.GetCurrentTab(): ERSOptionsTab;
begin
  if Self.ElementFinder.CountColor(Self.ELEMENT_TAB_AUDIO, [2700606]) > 1000 then
    Exit(ERSOptionsTab.AUDIO);
  if Self.ElementFinder.CountColor(Self.ELEMENT_TAB_CONTROL, [2700606]) > 1000 then
    Exit(ERSOptionsTab.CONTROLS);
  if Self.ElementFinder.CountColor(Self.ELEMENT_TAB_DISPLAY, [2700606]) > 1000 then
    Exit(ERSOptionsTab.DISPLAY);
end;

(*
Options.OpenTab
~~~~~~~~~~~~~~~
.. pascal:: function TRSOptions.OpenTab(Tab: ERSOptionsTab): Boolean;

Attempts to open the options **Tab** specified.

Example
-------

  WriteLn Options.OpenTab(ERSOptionsTab.DISPLAY);
*)
function TRSOptions.OpenTab(Tab: ERSOptionsTab): Boolean;
begin
  if (not Self.Open()) or (Self.IsHouseOptionsOpen() and (not Self.CloseHouseOptions())) then
    Exit(False);
  if (Self.GetCurrentTab() = Tab) then
    Exit(True);

  case Tab of
    ERSOptionsTab.CONTROLS: Self.ElementFinder.Click(Self.ELEMENT_TAB_CONTROL);
    ERSOptionsTab.DISPLAY:  Self.ElementFinder.Click(Self.ELEMENT_TAB_DISPLAY);
    ERSOptionsTab.AUDIO:    Self.ElementFinder.Click(Self.ELEMENT_TAB_AUDIO);
  end;

  Result := WaitUntil(Self.GetCurrentTab() = Tab, RandomLeft(50, 1500), 3000);
end;

procedure TRSOptions.Setup(Name: String); override;
begin
  inherited;

  Self.ID := ERSGameTab.OPTIONS;
end;

var
  Options: TRSOptions;

begin
  Options.Setup('Options');
end;

function TRSGameTabs.GetCurrentTab(): ERSGameTab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and Options.IsHouseOptionsOpen then
    Result := ERSGameTab.OPTIONS;
end;

