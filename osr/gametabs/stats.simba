{$DEFINE SRL_STATS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSSkill = (
    ATTACK,
    HITPOINTS,
    MINING,
    STRENGTH,
    AGILITY,
    SMITHING,
    DEFENCE,
    HERBLORE,
    FISHING,
    RANGE,
    THIEVING,
    COOKING,
    PRAYER,
    CRAFTING,
    FIREMAKING,
    MAGIC,
    FLETCHING,
    WOODCUTTING,
    RUNECRAFTING,
    SLAYER,
    FARMING,
    CONSTRUCTION,
    HUNTER,
    TOTAL
  );

const
  SKILLNAMES = [
   'Attack',
   'Hitpoints',
   'Mining',
   'Strength',
   'Agility',
   'Smithing',
   'Defence',
   'Herblore',
   'Fishing',
   'Range',
   'Thieving',
   'Cooking',
   'Prayer',
   'Crafting',
   'Firemaking',
   'Magic',
   'Fletching',
   'Woodcutting',
   'Runecraft',
   'Slayer',
   'Farming',
   'Construction',
   'Hunter',
   'Total'
  ];

type
  TRSSkillInfo = record
    Level:     Int32;
    XP:        Int32;
    Next:      Int32;
    Remainder: Int32;
  end;

type
  TRSStats = type TRSGameTab;

function TRSStats.GetSkillBoxes: TBoxArray;
begin
  Result := TBoxArray.Create([Self.X1 + 5, Self.Y1 + 6], 3, 8, 53, 23, [10, 9]);
end;

function TRSStats.GetSkillBox(Skill: ERSSkill): TBox;
begin
  Result := Self.GetSkillBoxes()[Ord(Skill)];
end;

function TRSStats.MouseOver(Skill: ERSSkill): Boolean;
begin
  Result := Self.Open();

  Mouse.Move(Self.GetSkillBox(Skill));
end;

function TRSStats.GetSkillInfo(Skill: ERSSkill; WaitTime: Int32 = 1500): TRSSkillInfo;

  function ReadHint(HintBounds: TBox; var Info: TRSSkillInfo): Boolean;
  var
    LineBoxes: TBoxArray;
    LineText: String;
    I: Integer;
  begin
    if (HintBounds.Area() < 100) then
      Exit;

    HintBounds := HintBounds.Expand(-1);
    LineBoxes := HintBounds.Partition(Ceil(HintBounds.Height() / 15), 1);

    for I := 0 to High(LineBoxes) do
    begin
      LineBoxes[I].Y1 -= 1;
      LineBoxes[I].Y2 += 3;

      LineText := OCR.Recognize(LineBoxes[I], TOCRColorFilter.Create([RSColors.TEXT_BLACK]), RS_FONT_PLAIN_12);

      case I of
        0:
          begin
            if not (SKILLNAMES[Skill] in LineText) then
              Exit;
            Info.XP := LineText.ExtractInteger();
          end;
        1: Info.Next      := LineText.ExtractInteger();
        2: Info.Remainder := LineText.ExtractInteger();
      end;
    end;

    Info.Level := SRL.GetLevelAtXP(Info.XP);

    Result := True;
  end;

var
  TPA: TPointArray;
begin
  if not Self.MouseOver(Skill) then
    Exit;

  WaitUntil(FindColors(TPA, RSColors.HINT_BACKGROUND, Self.Bounds) and ReadHint(TPA.Bounds(), Result), RandomLeft(100, 200), WaitTime);
end;

function TRSStats.GetCurrentLevel(Skill: ERSSkill): Int32;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit(-1);

  B := Self.GetSkillBox(Skill);
  B.Y2 := B.Y1 + (B.Height div 2);

  Result := OCR.RecognizeNumber(B, TOCRColorFilter.Create([RSColors.TEXT_YELLOW]), RS_FONT_PLAIN_11);
end;

procedure TRSStats.Setup(Name: String); override;
begin
  inherited;

  Self.ID := ERSGameTab.STATS;
end;

var
  Stats: TRSStats;

begin
  Stats.Setup('Stats');
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  if Stats.IsOpen() then
    Bitmap.DrawBoxArray(Stats.GetSkillBoxes(), False, $00FFFF);

  inherited();
end;

