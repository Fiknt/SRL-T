(*
Item Finder
===========
*)

{$DEFINE SRL_ITEMFINDER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSItem = Variant;
  TRSItemArray = array of TRSItem;

  TRSItemFinderCustomFilter = procedure(constref image, templ: TImage) of object;

  TRSItemFinder = record //(TSRLBaseRecord)
    IMAGES_ZIP: String;
    ITEM_NAMES: String;
    IMAGES_PATH: String;

    ItemNames: TStringList;
    ItemFilters: array of record
      Name: String;
      Filter: TRSItemFinderCustomFilter;
    end;

    ItemImages: array of record
      Name: String;
      Images: array of TImage;
    end;

    Similarity: Single;
  end;

procedure TRSItemFinder.Free();
var
  i, j: Int32;
begin
  Self.ItemNames.Free();

  for i := 0 to High(Self.ItemImages) do
    for j := 0 to High(Self.ItemImages[i].Images) do
      Self.ItemImages[i].Images[j].Free();
end;

procedure TRSItemFinder.Setup();
begin
  Self.IMAGES_ZIP  := {$macro CURRENT_DIRECTORY} + '/item-images.zip';
  Self.ITEM_NAMES  := {$macro CURRENT_DIRECTORY} + '/item-names';
  Self.IMAGES_PATH := SIMBA_DATA_DIR + 'SRL' + DirectorySeparator + 'itemfinder' +
                      DirectorySeparator + SHA1File(Self.IMAGES_ZIP) +
                      DirectorySeparator;

  ForceDirectories(Self.IMAGES_PATH);

  Self.Name := 'ItemFinder';
  Self.Similarity := 0.999;

  Self.ItemNames.Init();
  Self.ItemNames.LoadFromFile(Self.ITEM_NAMES);
  Self.ItemNames.SetSorted(True);

  AddOnTerminate(@Self.Free);
end;

procedure TRSItemFinder.AddItemName(constref item, id: String);
begin
  Self.ItemNames.Add(item + '=' + id);
end;

procedure TRSItemFinder.AddItemNames(constref items: TStringArray; constref id: String);
var
  item: String;
begin
  for item in items do
    Self.ItemNames.Add(item + '=' + id);
end;

procedure TRSItemFinder.AddItemFilter(item: String; filter: TRSItemFinderCustomFilter);
begin
  Self.ItemFilters += [item, @filter];
end;


function TRSItemFinder.GetItemIDs(item: String): TIntegerArray;
type
  TStringList = TStringList;

  function TStringList.NameFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).Before('=');
  end;

  function TStringList.ValueFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).After('=');
  end;

var
  itemID: Int32;
begin
  if item.IsDigit() then
    Exit(Result + item.ExtractNumber());

  itemID := Self.ItemNames.IndexOfName(item);
  while SameText(item, Self.ItemNames.NameFromIndex(itemID)) do
  begin
    Result := Result + StrToInt(Self.ItemNames.ValueFromIndex(itemID));

    Inc(itemID);
  end;
end;


function TRSItemFinder.GetItemImages(item: String): array of TImage;
type
  TImage = TImage;

  function TImage.Equals(Other: TImage): Boolean;
  begin
    Result := (Self.GetWidth()  = Other.GetWidth()) and
              (Self.GetHeight() = Other.GetHeight()) and
              (CompareMem(Self.GetData()^, Other.GetData()^, Self.GetWidth() * Self.GetHeight() * SizeOf(TRGB32)));
  end;

var
  fileName: String;
  image: TImage;
  itemID: Int32;
  i: Int32;
begin
  for i := 0 to High(Self.ItemImages) do
    if (Self.ItemImages[i].Name = item) then
    begin
      Result := Self.ItemImages[i].Images;
      Exit;
    end;

  for itemID in Self.GetItemIDs(item) do
  begin
    fileName := ExpandFileName(Self.IMAGES_PATH + ToString(itemID) + '.png');

    if not FileExists(fileName) then
    begin
      Self.DebugLn('Unzipping item sprite: ' + ExtractFileName(fileName) + ' this can take a few seconds');
      if not UnZipOneFile(Self.IMAGES_ZIP, ExtractFileName(fileName), Self.IMAGES_PATH) then
        Self.Fatal('Unknown item: ' + ToString(itemID));
    end;

    image.Init(Client.GetMBitmaps());
    image.LoadFromFile(fileName);
    image.SetName(item);
    image.ReplaceColor(RS_ITEM_SHADOW, 0);

    for i := 0 to High(Result) do
      if image.Equals(Result[i]) then
      begin
        image.Free();
        image := nil;

        Break;
      end;

    if (image <> nil) then
      Result += image;
  end;

  if (Length(Result) = 0) then
    Self.Fatal('Unknown item: ' + item);

  Self.ItemImages += [item, Result];
end;

function TRSItemFinder.CompareItems(constref image, template: TImage; constref CustomFilter: TRSItemFinderCustomFilter): Single;
var
  imageBorder, templateBorder: TPointArray;
  tpa, clearTPA: TPointArray;
  alignedTemplate, alignedImage: TImage;
  align: TPoint;
  clearColor: Int32;
  p: TPoint;
begin
  if image.FindColors(imageBorder, RS_ITEM_BORDER) and template.FindColors(templateBorder, RS_ITEM_BORDER) then
  begin
    with templateBorder.Bounds() do
    begin
      template.Crop(X1, Y1, X2, Y2);
      templateBorder := templateBorder.Offset(-X1,-Y1);
    end;

    // Use highest Y point of both images for alignment
    // TPA is already sorted like this with how FindColors operates.
    align.X := Max(0, imageBorder[High(imageBorder)].X - templateBorder[High(templateBorder)].X);
    align.Y := Max(0, imageBorder[High(imageBorder)].Y - templateBorder[High(templateBorder)].Y);

    // Compare borders. Sparkles can modify boundaries.
    if (@CustomFilter = nil) then
      for p in templateBorder.Offset(align) do
      begin
        if (p.Y <= 8) then // Possible stack number... Don't compare.
          Continue;
        if (not PointInTPA(p, imageBorder)) then // Borders don't match. No point going further.
          Exit;
      end;

    alignedImage := image.Copy();

    alignedTemplate.Init(Client.GetMBitmaps());
    alignedTemplate.SetSize(image.GetWidth(), image.GetHeight());

    template.DrawTransparent(align.X, align.Y, alignedTemplate);

    if (@CustomFilter <> nil) then
      CustomFilter(alignedImage, alignedTemplate);

    // Clear these template colors on both images
    for clearColor in [RS_ITEM_YELLOW_STACK, RS_ITEM_WHITE_STACK, RS_ITEM_GREEN_STACK, RS_ITEM_BORDER] do
      if AlignedTemplate.FindColors(tpa, clearColor) then
        clearTPA += tpa;

    // Clear image background on template
    if alignedImage.FindColors(tpa, 0) then
      clearTPA += tpa;
    if alignedTemplate.FindColors(tpa, 0) then
      clearTPA += tpa;

    alignedTemplate.DrawTPA(clearTPA, 0);
    alignedImage.DrawTPA(clearTPA, 0);

    Result := alignedImage.MatchTemplate(alignedTemplate, TM_CCORR_NORMED)[0][0]; // IDK why I used CCORR. But it works!

    alignedImage.Free();
    alignedTemplate.Free();
  end;
end;

type
  TRSItemFinderMatch = record
    Item: TRSItem;
    Box: TBox;
    Index: Integer;
  end;
  TRSItemFinderMatchArray = array of TRSItemFinderMatch;

function TRSItemFinder.FindAll(items: TRSItemArray; boxes: TBoxArray; maxToFind: Integer = 0): TRSItemFinderMatchArray;
var
  i, j: Integer;
  images: TImageArray;
  template: TImage;
  filter: TRSItemFinderCustomFilter;
  itemsToSearchFor: array of record
    Image: TImage;
    Name: TRSItem;
    Filter: TRSItemFinderCustomFilter;
  end;
begin
  for i := 0 to High(items) do
  begin
    filter := nil;
    for j := 0 to High(Self.ItemFilters) do
    begin
      if SameText(Self.ItemFilters[j].Name, items[i]) then
      begin
        filter := @Self.ItemFilters[j].Filter;
        Break;
      end;
    end;

    images := Self.GetItemImages(items[i]);
    for j := 0 to High(images) do
      itemsToSearchFor += [images[j], items[i], @filter];
  end;

  for i := 0 to High(boxes) do
    for j := 0 to High(itemsToSearchFor) do
    begin
      if boxes[i].Width() < 36 then
        boxes[i].X2 := boxes[i].X1 + 36;
      template.FromClient(boxes[i]);

      try
        // Search for item image *ON* the screen image since screen image is never larger than 36x36 item image.
        if Self.CompareItems(itemsToSearchFor[j].Image, template, @itemsToSearchFor[j].Filter) >= Self.Similarity then
        begin
          Result += [itemsToSearchFor[j].Name, boxes[i], i];
          if Length(Result) = maxToFind then
            Exit;
          Break;
        end;
      finally
        template.Free();
      end;
    end;
end;

function TRSItemFinder.Find(Items: TRSItemArray; Boxes: TBoxArray; out Match: TRSItemFinderMatch): Boolean;
var
  Matches: TRSItemFinderMatchArray;
begin
  Matches := Self.FindAll(Items, Boxes, 1);

  Result := Length(Matches) = 1;
  if Result then
    Match := Matches[0];
end;


procedure TRSItemFinderCustomFilter.ClearSparkles(constref Image, Templ: TImage); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 130) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 130) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.FireCape(constref Image, Templ: TImage); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) > 300) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) > 300) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.LavaScales(constref Image, Templ: TImage); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) > 235) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) > 235) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.DarkEss(constref Image, Templ: TImage); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 54) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 54) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinder._SetupHerbSeeds(herbSeed: String);
const
  ID_ARRAY = ['5224', '5225', '5226', '5227'];
var
  i: Int32;
begin
  for i := 0 to High(ID_ARRAY) do
    Self.AddItemName(herbSeed, ID_ARRAY[i]);
end;

var
  ItemFinder: TRSItemFinder;

begin
  ItemFinder.Setup();

  // We can map some useful things here
  ItemFinder._SetupHerbSeeds('Marrentill seed');
  ItemFinder._SetupHerbSeeds('Tarromin seed');
  ItemFinder._SetupHerbSeeds('Harralander seed');
  ItemFinder._SetupHerbSeeds('Ranarr seed');
  ItemFinder._SetupHerbSeeds('Toadflax seed');
  ItemFinder._SetupHerbSeeds('Irit seed');
  ItemFinder._SetupHerbSeeds('Avantoe seed');
  ItemFinder._SetupHerbSeeds('Kwuarm seed');
  ItemFinder._SetupHerbSeeds('Snapdragon seed');
  ItemFinder._SetupHerbSeeds('Cadantine seed');
  ItemFinder._SetupHerbSeeds('Lantadyme seed');
  ItemFinder._SetupHerbSeeds('Dwarf weed seed');
  ItemFinder._SetupHerbSeeds('Torstol seed');
  ItemFinder.AddItemFilter('Magic logs', @TRSItemFinderCustomFilter.ClearSparkles);
  ItemFinder.AddItemFilter('noted Magic logs', @TRSItemFinderCustomFilter.ClearSparkles);
  ItemFinder.AddItemFilter('Fire cape', @TRSItemFinderCustomFilter.FireCape);
  ItemFinder.AddItemFilter('Lava scale', @TRSItemFinderCustomFilter.LavaScales);
  ItemFinder.AddItemFilter('Lava scale shard', @TRSItemFinderCustomFilter.LavaScales);
  ItemFinder.AddItemFilter('Dark essence block', @TRSItemFinderCustomFilter.DarkEss);
end;
