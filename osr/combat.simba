(*
Combat
======
Methods to interact with the combat tab.
*)

{$DEFINE SRL_COMBAT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

const
  COMBAT_STYLE_ACCURATE  = 'Accurate';
  COMBAT_STYLE_RAPID     = 'Rapid';
  COMBAT_STYLE_LONGRANGE = 'Longrange';
  COMBAT_STYLE_BASH      = 'Bash';
  COMBAT_STYLE_POUND     = 'Pound';
  COMBAT_STYLE_FOCUS     = 'Focus';
  COMBAT_STYLE_CHOP      = 'Chop';
  COMBAT_STYLE_SLASH     = 'Slash';
  COMBAT_STYLE_LUNGE     = 'Lunge';
  COMBAT_STYLE_BLOCK     = 'Block';
  COMBAT_STYLE_FLICK     = 'Flick';
  COMBAT_STYLE_LASH      = 'Lash';
  COMBAT_STYLE_DEFLECT   = 'Deflect';
  COMBAT_STYLE_SWIPE     = 'Swipe';
  COMBAT_STYLE_SMASH     = 'Smash';
  
var
  COMBAT_STYLES = [
    COMBAT_STYLE_ACCURATE,
    COMBAT_STYLE_RAPID,
    COMBAT_STYLE_LONGRANGE,
    COMBAT_STYLE_BASH,
    COMBAT_STYLE_POUND,
    COMBAT_STYLE_FOCUS,
    COMBAT_STYLE_CHOP,
    COMBAT_STYLE_SLASH,
    COMBAT_STYLE_LUNGE,
    COMBAT_STYLE_BLOCK,
    COMBAT_STYLE_FLICK,
    COMBAT_STYLE_LASH,
    COMBAT_STYLE_DEFLECT,
    COMBAT_STYLE_SWIPE,
    COMBAT_STYLE_SMASH
  ];

type
  TRSCombat = record(TRSGameTab)
  class const
    ELEMENT_WEAPON:         TRSInterfaceElement = [9, 6, 173, 17];
    ELEMENT_COMBAT_LEVEL:   TRSInterfaceElement = [35, 25, 119, 15];
    ELEMENT_STYLE_1:        TRSInterfaceElement = [22, 49, 65, 41];
    ELEMENT_STYLE_2:        TRSInterfaceElement = [102, 49, 65, 41];
    ELEMENT_STYLE_3:        TRSInterfaceElement = [23, 103, 65, 41];
    ELEMENT_STYLE_4:        TRSInterfaceElement = [102, 103, 65, 41];
    ELEMENT_AUTO_RETALIATE: TRSInterfaceElement = [23, 157, 144, 38];
  end;

(*
Combat.IsOpen
~~~~~~~~~~~~~
.. pascal:: function TRSCombat.IsOpen: Boolean;

Returns true if the combat tab is open.

Example
-------

  WriteLn Combat.IsOpen;
*)
function TRSCombat.IsOpen: Boolean;
begin
  Exit(True);
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.COMBAT);
end;

(*
Combat.Open
~~~~~~~~~~~
.. pascal:: function TRSCombat.Open: Boolean;

Attempts to open the combat tab.

Example
-------

  Combat.Open;
*)
function TRSCombat.Open: Boolean;
begin
  Exit(True);
  //Result := GameTabs.Open(ERSGameTab.COMBAT);
end;

(*
Combat.GetCombatStyle
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.GetCombatStyle: String;

Get the current attack style.

Example
-------

  WriteLn('The current combat style is: ', Combat.GetCombatStyle);

*)
function TRSCombat.GetCombatStyle: String;

  function GetStyle(Element: TRSInterfaceElement): String;
  var
    Style: String;
  begin
    for Style in COMBAT_STYLES do
      if Self.ElementFinder.HasText(Element, [RSColors.TEXT_ORANGE], Style, RS_FONT_PLAIN_11) then
      begin
        Result := Style;
        Exit;
      end;
  end;

var
  I: Int32;
begin
  if not Self.Open() then
    Exit;

  if Self.ElementFinder.HasColor(Self.ELEMENT_STYLE_1, [RSColors.BUTTON_RED], [5]) then Result := GetStyle(Self.ELEMENT_STYLE_1) else
  if Self.ElementFinder.HasColor(Self.ELEMENT_STYLE_2, [RSColors.BUTTON_RED], [5]) then Result := GetStyle(Self.ELEMENT_STYLE_2) else
  if Self.ElementFinder.HasColor(Self.ELEMENT_STYLE_3, [RSColors.BUTTON_RED], [5]) then Result := GetStyle(Self.ELEMENT_STYLE_3) else
  if Self.ElementFinder.HasColor(Self.ELEMENT_STYLE_4, [RSColors.BUTTON_RED], [5]) then Result := GetStyle(Self.ELEMENT_STYLE_4);
end;

(*
Combat.SetCombatStyle
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.SetCombatStyle(Style: String): Boolean;

Set the attack style to the **Style** specified.

Example
-------

  Combat.SetCombatStyle(COMBAT_STYLE_SLASH);

*)
function TRSCombat.SetCombatStyle(Style: String): Boolean;

  function Toggle(Element: TRSInterfaceElement): Boolean;
  begin
    Result := Self.ElementFinder.HasText(Element, [RSColors.TEXT_ORANGE], Style, RS_FONT_PLAIN_11) and
              Self.ElementFinder.Toggle(Element, RSColors.BUTTON_RED, 5);
  end;

begin
  if not Self.Open() then
    Exit;

  Result := Toggle(Self.ELEMENT_STYLE_1) or Toggle(Self.ELEMENT_STYLE_2) or Toggle(Self.ELEMENT_STYLE_3) or Toggle(Self.ELEMENT_STYLE_4);
end;

(*
Combat.GetAutoRetaliate
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.GetAutoRetaliate: Boolean;

Get the current state of auto retaliate.

Example
-------

  WriteLn Combat.GetAutoRetaliate;

*)
function TRSCombat.GetAutoRetaliate: Boolean;
begin
  if not Self.Open() then
    Exit;

  Result := Self.ElementFinder.HasColor(Self.ELEMENT_AUTO_RETALIATE, [RSColors.BUTTON_RED], [5]);
end;

(*
Combat.SetAutoRetaliate
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.SetAutoRetaliate(Value: Boolean): Boolean;

Set the state of auto retaliate on or off.

Example
-------

  Combat.SetAutoRetaliate(True);

*)
function TRSCombat.SetAutoRetaliate(Value: Boolean): Boolean;
begin
  if (not Self.Open()) then
    Exit(False);

  case Value of
    True:  Result := Self.ElementFinder.Toggle(Self.ELEMENT_AUTO_RETALIATE, RSColors.BUTTON_RED, 5);
    False: Result := Self.ElementFinder.Toggle(Self.ELEMENT_AUTO_RETALIATE, RSColors.BUTTON_GREY, 5);
  end;
end;

(*
Combat.GetWeapon
~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.GetWeapon: String;

Get the name of the current worn weapon.

Example
-------

  WriteLn('The current weapon is: ', Combat.GetWeapon);

*)
function TRSCombat.GetWeapon: String;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit;

  B := Self.Bounds;
  B.Y2 := B.Y1 + 25;

  Result := OCR.Recognize(B, TOCRColorFilter.Create([2070783]), RS_FONT_QUILL_8);
end;

(*
Combat.GetCombatLevel
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSCombat.GetCombatLevel: Int32;

Get the current combat level.

Example
-------

  WriteLn('Current combat level is: ', Combat.GetCombatLevel);

*)
function TRSCombat.GetCombatLevel: Int32;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit;

  Result := Self.ElementFinder.ReadNumber(Self.ELEMENT_COMBAT_LEVEL, [RSColors.TEXT_ORANGE], RS_FONT_PLAIN_11);
end;

procedure TRSCombat.Setup(Name: String); override;
begin
  inherited;

  // Self.ID := ERSGameTab.COMBAT;
end;

(*
var Combat
~~~~~~~~~~
  Global Combat variable.
*)
var
  Combat: TRSCombat;

begin
  Combat.Setup('Combat');
end;

(*
Minimap
=======
Methods to handle the minimap special attack orb.
*)

(*
Minimap.GetSpecLevel
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMinimap.GetSpecLevel: Int32;

**Minimap.GetSpecLevel** is used to retrieve the special attack level from the minimap orb.

Example
-------

  Writeln Minimap.GetSpecLevel;
*)
function TRSMinimap.GetSpecLevel: Int32;
begin
  Result := Self.GetOrbLevel(Self.GetSpecAttackCircle);
end;

(*
Minimap.IsSpecEnabled
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.IsSpecEnabled;

**Minimap.IsSpecEnabled** returns true if the special attack is enabled.

Example
-------

  Writeln Minimap.IsSpecEnabled;
*)
function TRSMinimap.IsSpecEnabled: Boolean;
begin
  Result := SRL.CountColor(CTS2(8682326, 16, 0.03, 1.15), Self.GetSpecAttackCircle.Bounds) > 1;
end;

(*
Minimap.IsSpecWeapon
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.IsSpecWeapon;

**Minimap.IsSpecWeapon** returns true if the current weapon has a special attack.
Returns false if the special attack level is at 0 or if the weapon doesn't have a special attack.

Example
-------

  Writeln Minimap.IsSpecWeapon;
*)
function TRSMinimap.IsSpecWeapon: Boolean;
begin
  Result := ((SRL.CountColor(CTS2(8480786, 19, 0.05, 1.36), Self.GetSpecAttackCircle.Bounds) > 0) or
            Self.IsSpecEnabled);
end;

(*
Minimap.EnableSpec
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.EnableSpec(MinSpec: Int32): Boolean;

**Minimap.EnableSpec** attempts to enable the special attack if we have at leas **MinSpec** special attack level.

Example
-------

  Minimap.EnableSpec(25);
*)
function TRSMinimap.EnableSpec(MinSpec: Int32): Boolean;
var
  T: UInt64;
begin
  if not Self.IsSpecWeapon or (Self.GetSpecLevel < MinSpec) then
    Exit(False);

  Result := Self.IsSpecEnabled;
  if not Result then
  begin
    Mouse.Click(Self.GetSpecAttackCircle, MOUSE_LEFT);

    T := GetTickCount() + Round(SRL.TruncatedGauss(1000, 2000));
    while (T > GetTickCount()) do
    begin
      if Self.IsSpecEnabled() then
        Exit(True);

      Wait(0, 1000, wdLeft);
    end;
  end;
end;

(*
Minimap.DisableSpec
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.DisableSpec;

**Minimap.DisableSpec** attempts to disable the special attack.

Example
-------

  Minimap.DisableSpec;
*)
function TRSMinimap.DisableSpec: Boolean;
var
  T: UInt64;
begin
  Result := not Self.IsSpecEnabled;

  if Result then
  begin
    Mouse.Click(Self.GetSpecAttackCircle, MOUSE_LEFT);

    T := GetTickCount() + Round(SRL.TruncatedGauss(1000, 2000));
    while (T > GetTickCount()) do
    begin
      if not Self.IsSpecEnabled() then
        Exit(True);

      Wait(0, 1000, wdLeft);
    end;
  end;
end;
